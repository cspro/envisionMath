// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Cell, Chart, Pie, Preloader,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Preloader = (function() {
    var _interval;

    _interval = null;

    function Preloader(layer) {
      this.layer = layer;
      this.container = new Kinetic.Container({
        height: 50,
        width: 90,
        x: this.layer.getWidth() / 2 - 45,
        y: this.layer.getHeight() / 2 - 20
      });
    }

    Preloader.prototype.initialize = function() {
      var i, rect, text, _i;
      for (i = _i = 0; _i < 3; i = ++_i) {
        rect = new Kinetic.Rect({
          height: 10,
          width: 10,
          fill: 'white',
          x: i * 25,
          y: this.container.getHeight() / 2 - 5,
          offset: {
            x: 5,
            y: 5
          }
        });
        this.animate(rect, i);
        this.container.add(rect);
      }
      text = new Kinetic.Text({
        text: 'Loading the data...',
        fill: '#4d7a93',
        fontSize: 10,
        fontStyle: 'bold',
        fontFamily: 'Arial',
        x: -15,
        y: 32,
        align: 'center'
      });
      this.container.add(text);
      return this;
    };

    Preloader.prototype.animate = function(elem, i) {
      return _interval = setInterval(function() {
        return setTimeout(function() {
          return elem.transitionTo({
            scale: {
              x: i === 1 ? 1.8 : 1.3,
              y: i === 1 ? 1.8 : 1.3
            },
            duration: 0.3,
            callback: function() {
              return elem.transitionTo({
                scale: {
                  x: 1,
                  y: 1
                },
                duration: 0.3
              });
            }
          });
        }, i * 300);
      }, 1200);
    };

    Preloader.prototype.addToStage = function() {
      this.layer.add(this.container);
      return this;
    };

    Preloader.prototype.removeFromStage = function() {
      clearInterval(_interval);
      this.container.transitionTo({
        opacity: 0,
        duration: 0.7,
        callback: (function(_this) {
          return function() {
            return _this.layer.remove(_this.container);
          };
        })(this)
      });
      return this;
    };

    return Preloader;

  })();

  Cell = (function() {
    var _cellHeight, _cellWidth, _offsetTop;

    _cellHeight = 20;

    _cellWidth = 200;

    _offsetTop = 85;

    function Cell(index, desc, arc, startArc, layer) {
      this.index = index;
      this.desc = desc;
      this.arc = arc;
      this.startArc = startArc;
      this.layer = layer;
      this.cellContainer = new Kinetic.Container();
    }

    Cell.prototype.initialize = function() {
      var that;
      that = this;
      this.cell = new Kinetic.Rect({
        width: _cellWidth,
        height: _cellHeight,
        fill: this.index % 2 ? 'rgba(255,255,255,0.5)' : 'rgba(255,255,255,0.7)',
        x: 50,
        y: this.index * (_cellHeight + 2) + _offsetTop
      });
      this.cellDecor = new Kinetic.Rect({
        width: 10,
        height: _cellHeight,
        fill: 'hsl(' + (100 * that.arc) + ',100%,57%)',
        opacity: 0.6,
        x: 50,
        y: this.index * (_cellHeight + 2) + _offsetTop
      });
      this.cellText = new Kinetic.Text({
        text: that.desc,
        fontSize: 10,
        fill: '#033a59',
        fontStyle: 'bold',
        fontFamily: 'Arial',
        offset: [10, 5],
        x: 80,
        y: this.index * (_cellHeight + 2) + _offsetTop + _cellHeight / 2
      });
      this.cellLine = new Kinetic.Line({
        points: [_cellWidth + 50, this.index * (_cellHeight + 2) + _offsetTop + _cellHeight / 2, _cellWidth + 100, this.index * (_cellHeight + 2) + _offsetTop + _cellHeight / 2, _cellWidth + 150, Math.sin(that.startArc + that.arc / 2) * 140 + (that.layer.getHeight() / 2), Math.cos(that.startArc + that.arc / 2) * 140 + (that.layer.getWidth() / 2) + 130, Math.sin(that.startArc + that.arc / 2) * 140 + (that.layer.getHeight() / 2)],
        opacity: 0,
        stroke: '#fff',
        strokeWidth: 2
      });
      this.lineDecor = new Kinetic.Circle({
        fill: '#fff',
        radius: 6,
        opacity: 0,
        x: Math.cos(that.startArc + that.arc / 2) * 140 + (that.layer.getWidth() / 2) + 130,
        y: Math.sin(that.startArc + that.arc / 2) * 140 + (that.layer.getHeight() / 2)
      });
      this.cellContainer.add(this.cell);
      this.cellContainer.add(this.cellDecor);
      this.cellContainer.add(this.cellText);
      this.layer.add(this.cellLine);
      this.layer.add(this.lineDecor);
      return this;
    };

    Cell.prototype.addToStage = function() {
      this.layer.add(this.cellContainer);
      this.cellContainer.on('mouseenter', (function(_this) {
        return function() {
          var labelContainer, pieContainer;
          document.body.style.cursor = "pointer";
          _this.cellDecor.transitionTo({
            duration: 0.1,
            opacity: 1
          });
          _this.cellLine.transitionTo({
            duration: 0.1,
            opacity: 1
          });
          _this.lineDecor.transitionTo({
            duration: 0.1,
            opacity: 1
          });
          labelContainer = _this.layer.getStage().get('.label_' + _this.index);
          labelContainer.apply('transitionTo', {
            duration: 0.2,
            opacity: 1
          });
          pieContainer = _this.layer.getStage().get('.pie_' + _this.index);
          return pieContainer.apply('transitionTo', {
            scale: {
              x: 1.25,
              y: 1.25
            },
            duration: 0.4,
            opacity: 1,
            easing: 'ease-out'
          });
        };
      })(this));
      this.cellContainer.on('mouseleave', (function(_this) {
        return function() {
          var labelContainer, pieContainer;
          document.body.style.cursor = "default";
          _this.cellDecor.transitionTo({
            duration: 0.1,
            opacity: 0.6
          });
          _this.cellLine.transitionTo({
            duration: 0.1,
            opacity: 0
          });
          _this.lineDecor.transitionTo({
            duration: 0.1,
            opacity: 0
          });
          labelContainer = _this.layer.getStage().get('.label_' + _this.index);
          labelContainer.apply('transitionTo', {
            duration: 0.2,
            opacity: 0
          });
          pieContainer = _this.layer.getStage().get('.pie_' + _this.index);
          return pieContainer.apply('transitionTo', {
            scale: {
              x: 1,
              y: 1
            },
            duration: 0.2,
            opacity: 0.8,
            easing: 'ease-out'
          });
        };
      })(this));
      return this;
    };

    return Cell;

  })();

  Pie = (function() {
    function Pie(index, arc, startArc, radius, layer) {
      this.index = index;
      this.arc = arc;
      this.startArc = startArc;
      this.radius = radius;
      this.layer = layer;
      this.pieContainer = new Kinetic.Container({
        x: this.layer.getWidth() / 2 + 130,
        y: this.layer.getHeight() / 2,
        opacity: 0.8,
        rotation: this.startArc,
        name: 'pie_' + this.index
      });
      this.labelContainer = new Kinetic.Container({
        opacity: 0,
        name: 'label_' + this.index
      });
    }

    Pie.prototype.initialize = function() {
      var pie, that;
      that = this;
      pie = new Kinetic.Shape({
        drawFunc: function(canvas) {
          var context;
          context = canvas.getContext('2d');
          context.beginPath();
          context.arc(0, 0, that.radius, 0, that.arc + 0.003);
          context.lineTo(0, 0);
          context.closePath();
          return canvas.fillStroke(this);
        },
        fill: 'hsl(' + (100 * that.arc) + ',100%,57%)'
      });
      this.pieContainer.add(pie);
      this.label = new Kinetic.Text({
        text: parseFloat((that.arc / (2 * Math.PI)) * 100).toFixed(1) + '%',
        fontSize: 11,
        fill: '"#033a59"',
        fontStyle: 'bold',
        fontFamily: 'Arial',
        offset: [10, 5],
        x: Math.cos(that.startArc + that.arc / 2) * 280 + (that.layer.getWidth() / 2) + 130,
        y: Math.sin(that.startArc + that.arc / 2) * 280 + (that.layer.getHeight() / 2)
      });
      this.labelCircle = new Kinetic.Circle({
        radius: 20,
        fill: 'rgba(255,255,255,0.6)',
        offset: [-2, 0],
        x: Math.cos(that.startArc + that.arc / 2) * 280 + (that.layer.getWidth() / 2) + 130,
        y: Math.sin(that.startArc + that.arc / 2) * 280 + (that.layer.getHeight() / 2)
      });
      this.labelContainer.add(this.labelCircle);
      this.labelContainer.add(this.label);
      return this;
    };

    Pie.prototype.addToStage = function() {
      this.layer.add(this.pieContainer);
      this.layer.add(this.labelContainer);
      return this;
    };

    return Pie;

  })();

  Chart = (function() {
    var _startArc;

    _startArc = 0;

    function Chart(containerId, height, width) {
      this.parseData = __bind(this.parseData, this);
      this.loadData = __bind(this.loadData, this);
      this.stage = new Kinetic.Stage({
        container: containerId,
        height: height,
        width: width
      });
      this.preloaderLayer = new Kinetic.Layer({
        height: height,
        width: width
      });
      this.chartLayer = new Kinetic.Layer({
        height: height,
        width: width,
        opacity: 0
      });
      this.preloader = new Preloader(this.preloaderLayer).initialize().addToStage();
      this.stage.add(this.preloaderLayer);
    }

    Chart.prototype.loadData = function(url) {
      return $.ajax({
        url: url,
        dataType: 'json',
        cache: true
      }).complete((function(_this) {
        return function(data) {
          return _this.parseData(data.responseText);
        };
      })(this));
    };

    Chart.prototype.parseData = function(data) {
      var index, item, items, _i, _len, _ref;
      items = JSON.parse(data);
      _ref = items.items;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        new Pie(index, item.value, _startArc, 3 / 9 * this.stage.getHeight(), this.chartLayer).initialize().addToStage();
        new Cell(index, item.desc, item.value, _startArc, this.chartLayer).initialize().addToStage();
        _startArc += item.value;
      }
      this.preloader.removeFromStage();
      this.stage.add(this.chartLayer);
      return this.chartLayer.transitionTo({
        opacity: 1,
        duration: 0.7
      });
    };

    return Chart;

  })();

  $(function() {
    return new Chart('chart', 600, 900).loadData('json/data.json');
  });

}).call(this);
